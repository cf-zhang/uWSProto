// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef PROTOBUF_INCLUDED_Login_2eproto
#define PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/stubs/common.h>
#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "client/MessageType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Login_2eproto();
namespace com {
namespace genesis {
namespace protobuf {
class CSClientType;
class CSClientTypeDefaultTypeInternal;
extern CSClientTypeDefaultTypeInternal _CSClientType_default_instance_;
class CSHandshake;
class CSHandshakeDefaultTypeInternal;
extern CSHandshakeDefaultTypeInternal _CSHandshake_default_instance_;
class SCHandshakeReply;
class SCHandshakeReplyDefaultTypeInternal;
extern SCHandshakeReplyDefaultTypeInternal _SCHandshakeReply_default_instance_;
}  // namespace protobuf
}  // namespace genesis
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::genesis::protobuf::CSClientType* Arena::CreateMaybeMessage<::com::genesis::protobuf::CSClientType>(Arena*);
template<> ::com::genesis::protobuf::CSHandshake* Arena::CreateMaybeMessage<::com::genesis::protobuf::CSHandshake>(Arena*);
template<> ::com::genesis::protobuf::SCHandshakeReply* Arena::CreateMaybeMessage<::com::genesis::protobuf::SCHandshakeReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace genesis {
namespace protobuf {

enum ClientType {
  Robot = 1,
  ControlClient = 2
};
bool ClientType_IsValid(int value);
const ClientType ClientType_MIN = Robot;
const ClientType ClientType_MAX = ControlClient;
const int ClientType_ARRAYSIZE = ClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientType_descriptor();
inline const ::std::string& ClientType_Name(ClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientType_descriptor(), value);
}
inline bool ClientType_Parse(
    const ::std::string& name, ClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientType>(
    ClientType_descriptor(), name, value);
}
// ===================================================================

class CSHandshake : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genesis.protobuf.CSHandshake) */ {
 public:
  CSHandshake();
  virtual ~CSHandshake();

  CSHandshake(const CSHandshake& from);

  inline CSHandshake& operator=(const CSHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSHandshake(CSHandshake&& from) noexcept
    : CSHandshake() {
    *this = ::std::move(from);
  }

  inline CSHandshake& operator=(CSHandshake&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSHandshake& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSHandshake* internal_default_instance() {
    return reinterpret_cast<const CSHandshake*>(
               &_CSHandshake_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CSHandshake* other);
  friend void swap(CSHandshake& a, CSHandshake& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSHandshake* New() const final {
    return CreateMaybeMessage<CSHandshake>(NULL);
  }

  CSHandshake* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSHandshake>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSHandshake& from);
  void MergeFrom(const CSHandshake& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSHandshake* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.genesis.protobuf.CSHandshake)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class SCHandshakeReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genesis.protobuf.SCHandshakeReply) */ {
 public:
  SCHandshakeReply();
  virtual ~SCHandshakeReply();

  SCHandshakeReply(const SCHandshakeReply& from);

  inline SCHandshakeReply& operator=(const SCHandshakeReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SCHandshakeReply(SCHandshakeReply&& from) noexcept
    : SCHandshakeReply() {
    *this = ::std::move(from);
  }

  inline SCHandshakeReply& operator=(SCHandshakeReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SCHandshakeReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SCHandshakeReply* internal_default_instance() {
    return reinterpret_cast<const SCHandshakeReply*>(
               &_SCHandshakeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SCHandshakeReply* other);
  friend void swap(SCHandshakeReply& a, SCHandshakeReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SCHandshakeReply* New() const final {
    return CreateMaybeMessage<SCHandshakeReply>(NULL);
  }

  SCHandshakeReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SCHandshakeReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SCHandshakeReply& from);
  void MergeFrom(const SCHandshakeReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCHandshakeReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 indexBegin = 1;
  bool has_indexbegin() const;
  void clear_indexbegin();
  static const int kIndexBeginFieldNumber = 1;
  ::google::protobuf::int32 indexbegin() const;
  void set_indexbegin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.genesis.protobuf.SCHandshakeReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 indexbegin_;
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class CSClientType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.genesis.protobuf.CSClientType) */ {
 public:
  CSClientType();
  virtual ~CSClientType();

  CSClientType(const CSClientType& from);

  inline CSClientType& operator=(const CSClientType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CSClientType(CSClientType&& from) noexcept
    : CSClientType() {
    *this = ::std::move(from);
  }

  inline CSClientType& operator=(CSClientType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CSClientType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CSClientType* internal_default_instance() {
    return reinterpret_cast<const CSClientType*>(
               &_CSClientType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CSClientType* other);
  friend void swap(CSClientType& a, CSClientType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CSClientType* New() const final {
    return CreateMaybeMessage<CSClientType>(NULL);
  }

  CSClientType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CSClientType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CSClientType& from);
  void MergeFrom(const CSClientType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSClientType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .com.genesis.protobuf.ClientType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::com::genesis::protobuf::ClientType type() const;
  void set_type(::com::genesis::protobuf::ClientType value);

  // @@protoc_insertion_point(class_scope:com.genesis.protobuf.CSClientType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CSHandshake

// -------------------------------------------------------------------

// SCHandshakeReply

// required int32 indexBegin = 1;
inline bool SCHandshakeReply::has_indexbegin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCHandshakeReply::clear_indexbegin() {
  indexbegin_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 SCHandshakeReply::indexbegin() const {
  // @@protoc_insertion_point(field_get:com.genesis.protobuf.SCHandshakeReply.indexBegin)
  return indexbegin_;
}
inline void SCHandshakeReply::set_indexbegin(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  indexbegin_ = value;
  // @@protoc_insertion_point(field_set:com.genesis.protobuf.SCHandshakeReply.indexBegin)
}

// -------------------------------------------------------------------

// CSClientType

// optional .com.genesis.protobuf.ClientType type = 1;
inline bool CSClientType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSClientType::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::com::genesis::protobuf::ClientType CSClientType::type() const {
  // @@protoc_insertion_point(field_get:com.genesis.protobuf.CSClientType.type)
  return static_cast< ::com::genesis::protobuf::ClientType >(type_);
}
inline void CSClientType::set_type(::com::genesis::protobuf::ClientType value) {
  assert(::com::genesis::protobuf::ClientType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:com.genesis.protobuf.CSClientType.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace genesis
}  // namespace com

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::genesis::protobuf::ClientType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::genesis::protobuf::ClientType>() {
  return ::com::genesis::protobuf::ClientType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Login_2eproto
